/**
 * Workbox Configuration
 * Service Worker utilities and caching strategies
 */

import { CacheStrategy } from '@/types/cache';

/**
 * Workbox Cache Configuration
 */
export interface WorkboxCacheConfig {
  cacheName: string;
  strategy: CacheStrategy;
  maxEntries?: number;
  maxAgeSeconds?: number;
  purgeOnQuotaError?: boolean;
}

/**
 * Cache Configurations for different content types
 */
export const cacheConfigs: Record<string, WorkboxCacheConfig> = {
  // Static assets (images, fonts, CSS, JS)
  staticAssets: {
    cacheName: 'dharma-static-assets-v1',
    strategy: 'cache-first',
    maxEntries: 100,
    maxAgeSeconds: 7 * 24 * 60 * 60, // 7 days
    purgeOnQuotaError: true
  },

  // API responses
  apiResponses: {
    cacheName: 'dharma-api-responses-v1',
    strategy: 'network-first',
    maxEntries: 50,
    maxAgeSeconds: 5 * 60, // 5 minutes
    purgeOnQuotaError: true
  },

  // Spiritual content (aartis, deities)
  spiritualContent: {
    cacheName: 'dharma-spiritual-content-v1',
    strategy: 'stale-while-revalidate',
    maxEntries: 200,
    maxAgeSeconds: 24 * 60 * 60, // 24 hours
    purgeOnQuotaError: false // Don't purge spiritual content on quota error
  },

  // Images (deity images, icons)
  images: {
    cacheName: 'dharma-images-v1',
    strategy: 'cache-first',
    maxEntries: 150,
    maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
    purgeOnQuotaError: true
  },

  // Fonts
  fonts: {
    cacheName: 'dharma-fonts-v1',
    strategy: 'cache-first',
    maxEntries: 10,
    maxAgeSeconds: 365 * 24 * 60 * 60, // 1 year
    purgeOnQuotaError: false
  }
};

/**
 * Runtime Caching Rules
 */
export const runtimeCachingRules = [
  // Cache API routes
  {
    urlPattern: /^https?:.*\/api\/.*/,
    handler: 'NetworkFirst',
    options: {
      cacheName: cacheConfigs.apiResponses.cacheName,
      expiration: {
        maxEntries: cacheConfigs.apiResponses.maxEntries,
        maxAgeSeconds: cacheConfigs.apiResponses.maxAgeSeconds,
        purgeOnQuotaError: cacheConfigs.apiResponses.purgeOnQuotaError
      },
      cacheKeyWillBeUsed: async ({ request }: { request: Request }) => {
        // Normalize cache keys for API requests
        const url = new URL(request.url);
        // Remove timestamp and other cache-busting parameters
        url.searchParams.delete('_t');
        url.searchParams.delete('timestamp');
        return url.toString();
      }
    }
  },

  // Cache images
  {
    urlPattern: /\.(?:png|jpg|jpeg|svg|gif|webp|avif)$/,
    handler: 'CacheFirst',
    options: {
      cacheName: cacheConfigs.images.cacheName,
      expiration: {
        maxEntries: cacheConfigs.images.maxEntries,
        maxAgeSeconds: cacheConfigs.images.maxAgeSeconds,
        purgeOnQuotaError: cacheConfigs.images.purgeOnQuotaError
      }
    }
  },

  // Cache fonts
  {
    urlPattern: /\.(?:woff|woff2|ttf|otf)$/,
    handler: 'CacheFirst',
    options: {
      cacheName: cacheConfigs.fonts.cacheName,
      expiration: {
        maxEntries: cacheConfigs.fonts.maxEntries,
        maxAgeSeconds: cacheConfigs.fonts.maxAgeSeconds,
        purgeOnQuotaError: cacheConfigs.fonts.purgeOnQuotaError
      }
    }
  },

  // Cache CSS and JS files
  {
    urlPattern: /\.(?:css|js)$/,
    handler: 'StaleWhileRevalidate',
    options: {
      cacheName: cacheConfigs.staticAssets.cacheName,
      expiration: {
        maxEntries: cacheConfigs.staticAssets.maxEntries,
        maxAgeSeconds: cacheConfigs.staticAssets.maxAgeSeconds,
        purgeOnQuotaError: cacheConfigs.staticAssets.purgeOnQuotaError
      }
    }
  },

  // Cache Google Fonts
  {
    urlPattern: /^https:\/\/fonts\.googleapis\.com\/.*/,
    handler: 'CacheFirst',
    options: {
      cacheName: 'google-fonts-stylesheets',
      expiration: {
        maxEntries: 10,
        maxAgeSeconds: 365 * 24 * 60 * 60 // 1 year
      }
    }
  },

  // Cache Google Fonts files
  {
    urlPattern: /^https:\/\/fonts\.gstatic\.com\/.*/,
    handler: 'CacheFirst',
    options: {
      cacheName: 'google-fonts-webfonts',
      expiration: {
        maxEntries: 30,
        maxAgeSeconds: 365 * 24 * 60 * 60 // 1 year
      }
    }
  }
];

/**
 * Precache Manifest
 * Files to precache on service worker installation
 */
export const precacheManifest = [
  // Essential pages
  '/',
  '/aartis',
  
  // Essential API endpoints (these would be populated dynamically)
  '/api/deities',
  
  // Critical CSS and JS (these would be generated by the build process)
  // The actual files would be determined at build time
];

/**
 * Background Sync Configuration
 */
export const backgroundSyncConfig = {
  // Queue name for offline actions
  queueName: 'dharma-offline-queue',
  
  // Maximum retry attempts
  maxRetentionTime: 24 * 60 * 60 * 1000, // 24 hours
  
  // Retry configuration
  retryConfig: {
    initialDelay: 1000, // 1 second
    maxDelay: 5 * 60 * 1000, // 5 minutes
    multiplier: 2
  }
};

/**
 * Navigation Preload Configuration
 */
export const navigationPreloadConfig = {
  enabled: true,
  headerValue: 'true'
};

/**
 * Skip Waiting Configuration
 */
export const skipWaitingConfig = {
  enabled: true,
  immediate: false // Don't skip waiting immediately, wait for user action
};

/**
 * Client Claim Configuration
 */
export const clientClaimConfig = {
  enabled: true
};

/**
 * Offline Fallbacks
 */
export const offlineFallbacks = {
  // Fallback page for navigation requests when offline
  navigationFallback: '/offline',
  
  // Fallback image for failed image requests
  imageFallback: '/images/offline-placeholder.png',
  
  // Fallback font
  fontFallback: '/fonts/fallback.woff2'
};

/**
 * Cache Names
 */
export const cacheNames = {
  precache: 'dharma-precache-v1',
  runtime: 'dharma-runtime-v1',
  googleFonts: 'dharma-google-fonts-v1'
};

/**
 * Service Worker Update Configuration
 */
export const updateConfig = {
  // Check for updates every hour
  updateCheckInterval: 60 * 60 * 1000,
  
  // Show update available notification
  showUpdateNotification: true,
  
  // Auto-update after this many milliseconds
  autoUpdateDelay: 24 * 60 * 60 * 1000 // 24 hours
};

/**
 * Workbox Debug Configuration
 */
export const workboxDebugConfig = {
  enabled: process.env.NODE_ENV === 'development',
  logLevel: 'info' as 'debug' | 'info' | 'warn' | 'error'
};

const workboxConfig = {
  cacheConfigs,
  runtimeCachingRules,
  precacheManifest,
  backgroundSyncConfig,
  navigationPreloadConfig,
  skipWaitingConfig,
  clientClaimConfig,
  offlineFallbacks,
  cacheNames,
  updateConfig,
  debugConfig: workboxDebugConfig
};

export default workboxConfig;